import os
from aiogram import Router, types 
from middlewares.restricted import (
    add_user_id, remove_user_id,
    add_admin_id, remove_admin_id,
    get_admin_ids, get_user_ids,
    is_super_admin, get_all_users_info
)

SUPER_ADMIN_ID = int(os.getenv("SUPER_ADMIN_ID"))
router = Router()
super_admin_router = router

@super_admin_router.callback_query(lambda c: c.data == "view_all")
async def view_all(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_super_admin(user_id):
        await callback.message.answer("‚ùå –¢–æ–ª—å–∫–æ SUPER ADMIN –º–æ–∂–µ—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.")
        return

    data = get_all_users_info()
    admins = data["admins"]
    users = data["users"]

    msg = f"üëë <b>SUPER ADMIN:</b>\n{SUPER_ADMIN_ID}\n\n"
    msg += "üëÆ‚Äç‚ôÇÔ∏è <b>–ê–¥–º–∏–Ω—ã</b>\n"
    msg += "\n".join(
        f"{a.get('id', '‚ùå–Ω–µ—Ç id')} ‚Äî {a.get('name', '‚ùå–Ω–µ—Ç name')}"
    for a in admins if isinstance(a, dict)
) + "\n\n"
    msg += "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n" + "\n".join(f"{u['id']} ‚Äî {u['name']}" for u in users)

    await callback.message.answer(msg, parse_mode="HTML")
    await callback.answer()

@super_admin_router.callback_query(lambda c: c.data in ["add_user", "remove_user", "add_admin", "remove_admin"])
async def ask_id(callback: types.CallbackQuery):
    action = callback.data
    router_data[callback.from_user.id] = action

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    action_texts = {
        "add_user":     ("‚ûï  –í–≤–µ–¥–∏—Ç–µ ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å"),
        "remove_user":  ("üóëÔ∏è  –í–≤–µ–¥–∏—Ç–µ ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å"),
        "add_admin":    ("‚ûï  –í–≤–µ–¥–∏—Ç–µ ID –ê–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å"),
        "remove_admin": ("üóëÔ∏è  –í–≤–µ–¥–∏—Ç–µ ID –ê–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å"),
    }

    rus_text = action_texts.get(action, ("–í–≤–µ–¥–∏—Ç–µ ID"))

    await callback.message.answer(f"{rus_text}")
    await callback.answer()

router_data = {}

@super_admin_router.message()
async def process_id_input(message: types.Message):
    user_id = message.from_user.id
    if user_id not in router_data:
        return

    action = router_data[user_id]
    try:
        target_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –±–µ–∑ –±—É–∫–≤, –ø–æ–≤—Ç–æ—Ä–Ω–æ:")
        return
    if action == "add_user":
        user = await message.bot.get_chat(target_id)
        name = user.username or user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        add_user_id(target_id, name)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} ({name}) –¥–æ–±–∞–≤–ª–µ–Ω.")

    elif action == "remove_user":
        if target_id in get_admin_ids():
            await message.answer("‚ùå –≠—Ç–æ—Ç ID –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∞–¥–º–∏–Ω—É, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            return
        if target_id not in get_user_ids():
            await message.answer("‚ùå –¢–∞–∫–æ–≥–æ ID –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        remove_user_id(target_id)
        await message.answer(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} —É–¥–∞–ª—ë–Ω.")
        try:
            await message.bot.send_message(
                target_id,
                "‚ö†Ô∏è –í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –≤–∞–º –∑–∞–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
            )
        except Exception as e:
            print(f"[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}]: {e}")

    elif action == "add_admin":
        user = await message.bot.get_chat(target_id)
        name = user.username or user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        add_admin_id(target_id, name)
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω —Å ID {target_id} ({name}) –¥–æ–±–∞–≤–ª–µ–Ω.")

    elif action == "remove_admin":
        if is_super_admin(target_id):
            await message.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å SUPER ADMIN.")
            return
        if target_id in get_user_ids():
            await message.answer("‚ùå –≠—Ç–æ—Ç ID –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∞ –Ω–µ –∞–¥–º–∏–Ω—É.")
            return
        if target_id not in get_admin_ids():
            await message.answer("‚ùå –¢–∞–∫–æ–≥–æ ID –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤.")
            return
        remove_admin_id(target_id)
        await message.answer(f"üóëÔ∏è –ê–¥–º–∏–Ω —Å ID {target_id} —É–¥–∞–ª—ë–Ω.")
        try:
            await message.bot.send_message(
                target_id,
                "‚ö†Ô∏è –í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤–∞–º –∑–∞–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
            )
        except Exception as e:
            print(f"[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {target_id}]: {e}")

    router_data.pop(user_id)
