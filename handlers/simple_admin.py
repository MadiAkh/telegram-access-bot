from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from middlewares.restricted import (
    add_user_id,
    remove_user_id,
    get_user_ids,
    get_admin_ids,
    increment_reject,
    get_all_users_info
)
from aiogram.types import CallbackQuery


router = Router()
simple_admin_router = router

admin_state = {}

@simple_admin_router.message(Command(commands=["start", "admin"]))
async def show_admin_panel(message: types.Message):
    user_id = message.from_user.id
    if user_id not in get_admin_ids():
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_view_users")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_user")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_remove_user")]
    ])
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboard)


@simple_admin_router.callback_query(lambda c: c.data == "admin_view_users")
async def view_users(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in get_admin_ids():
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    users_data = get_all_users_info()["users"]
    msg = "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n" + "\n".join(
        f"{u['id']} ‚Äî {u['name']}" for u in users_data
    ) if users_data else "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
    await callback.message.answer(msg, parse_mode="HTML")
    await callback.answer()


@simple_admin_router.callback_query(lambda c: c.data in ["admin_add_user", "admin_remove_user"])
async def ask_user_id(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in get_admin_ids():
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    action = callback.data.replace("admin_", "")
    admin_state[user_id] = action
    await callback.message.answer(f"‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.")
    await callback.answer()


@simple_admin_router.message()
async def process_user_id(message: types.Message):
    user_id = message.from_user.id
    if user_id not in admin_state:
        return

    action = admin_state.pop(user_id)
    try:
        target_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return

    if action == "add_user":
        user = await message.bot.get_chat(target_id)
        name = user.username or user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        add_user_id(target_id, name)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} ({name}) –¥–æ–±–∞–≤–ª–µ–Ω.")
    elif action == "remove_user":
        remove_user_id(target_id)
        await message.answer(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —É–¥–∞–ª—ë–Ω.")

@simple_admin_router.callback_query(lambda c: c.data.startswith("approve_user:"))
async def approve_user_callback(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    user = await callback.bot.get_chat(user_id)
    name = user.username or user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    add_user_id(user_id, name)
    await callback.message.bot.send_message(user_id, "‚úÖ –í–∞–º –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
    await callback.message.edit_text("üë§ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


@simple_admin_router.callback_query(lambda c: c.data.startswith("deny_user:"))
async def deny_user_callback(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    increment_reject(user_id)  # ‚¨ÖÔ∏è —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ—Ç–∫–∞–∑

    try:
        await callback.message.bot.send_message(
            user_id,
            "‚ùå –í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ."
        )
    except Exception as e:
        print(f"[‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}]: {e}")

    await callback.message.edit_text("‚õî –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
